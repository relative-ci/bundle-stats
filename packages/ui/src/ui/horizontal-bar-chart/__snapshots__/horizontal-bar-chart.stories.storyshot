// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots UI/HorizontalBarChart default 1`] = `
<div>
  <Component>
    <MemoryRouter
      initialEntries={
        Array [
          Object {
            "key": "home",
            "pathname": "/",
          },
        ]
      }
    >
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "key": "home",
                "pathname": "/",
                "search": "",
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "home",
              "pathname": "/",
              "search": "",
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <div
          style={
            Object {
              "height": "100%",
              "padding": "24px",
              "paddingTop": "128px",
              "width": "100%",
            }
          }
        >
          <HorizontalBarChart
            className=""
            data={
              Object {
                "labels": Array [
                  "JS",
                  "CSS",
                  "IMG",
                  "Others",
                  "HTML",
                ],
                "values": Array [
                  300,
                  200,
                  300,
                  0,
                  20,
                ],
              }
            }
            maxValue={null}
          >
            <div
              className="root"
            >
              <HorizontalBarChartItem
                className="item"
                color="rgba(136,132,216,1)"
                getItemTooltip={[Function]}
                key="0"
                label="JS"
                width="36.59%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(136,132,216,1)",
                      "width": "36.59%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              JS
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          JS
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(140,203,227,1)"
                getItemTooltip={[Function]}
                key="1"
                label="CSS"
                width="24.39%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(140,203,227,1)",
                      "width": "24.39%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              CSS
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          CSS
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(135,205,150,1)"
                getItemTooltip={[Function]}
                key="2"
                label="IMG"
                width="36.59%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(135,205,150,1)",
                      "width": "36.59%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              IMG
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          IMG
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(183,228,99,1)"
                getItemTooltip={[Function]}
                key="3"
                label="Others"
                width="0%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(183,228,99,1)",
                      "width": "0%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              Others
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          Others
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(255,198,88,1)"
                getItemTooltip={[Function]}
                key="4"
                label="HTML"
                width="2.44%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(255,198,88,1)",
                      "width": "2.44%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              HTML
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          HTML
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
            </div>
          </HorizontalBarChart>
        </div>
      </Router>
    </MemoryRouter>
  </Component>
  <IconSprite
    height="16"
    style={
      Object {
        "height": 0,
        "position": "absolute",
        "width": 0,
      }
    }
    width="16"
  >
    <svg
      height="16"
      style={
        Object {
          "height": 0,
          "position": "absolute",
          "width": 0,
        }
      }
      width="16"
    >
      <symbol
        className="feather feather-arrow-down"
        fill="none"
        id="arrow"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 5v14M19 12l-7 7-7-7"
        />
      </symbol>
      <symbol
        className="feather feather-arrow-right-circle"
        fill="none"
        id="arrow-right-circle"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 16l4-4-4-4M8 12h8"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="cancel"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-clock"
        fill="none"
        id="clock"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 6v6l4 2"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="close"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-git-commit"
        fill="none"
        id="commit"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="4"
        />
        <path
          d="M1.05 12H7M17.01 12h5.95"
        />
      </symbol>
      <symbol
        className="feather feather-bar-chart"
        fill="none"
        id="filter"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 20V10M18 20V4M6 20v-4"
        />
      </symbol>
      <symbol
        className="feather feather-help-circle"
        fill="none"
        id="help"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M9.09 9a3 3 0 015.83 1c0 2-3 3-3 3M12 17h.01"
        />
      </symbol>
      <symbol
        className="feather feather-menu"
        fill="none"
        id="menu"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 12h18M3 6h18M3 18h18"
        />
      </symbol>
      <symbol
        fill="currentColor"
        id="sort"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
        />
        <path
          d="M0 0h24v24H0z"
          fill="none"
        />
      </symbol>
      <symbol
        className="feather feather-alert-triangle"
        fill="none"
        id="warning"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0zM12 9v4M12 17h.01"
        />
      </symbol>
    </svg>
  </IconSprite>
</div>
`;

exports[`Storyshots UI/HorizontalBarChart empty values 1`] = `
<div>
  <Component>
    <MemoryRouter
      initialEntries={
        Array [
          Object {
            "key": "home",
            "pathname": "/",
          },
        ]
      }
    >
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "key": "home",
                "pathname": "/",
                "search": "",
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "home",
              "pathname": "/",
              "search": "",
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <div
          style={
            Object {
              "height": "100%",
              "padding": "24px",
              "paddingTop": "128px",
              "width": "100%",
            }
          }
        >
          <HorizontalBarChart
            className=""
            data={
              Object {
                "labels": Array [
                  "JS",
                  "CSS",
                  "IMG",
                  "Others",
                  "HTML",
                ],
                "values": Array [
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
              }
            }
            maxValue={null}
          >
            <div
              className="root"
            >
              <HorizontalBarChartItem
                className="item"
                color="rgba(136,132,216,1)"
                getItemTooltip={[Function]}
                key="0"
                label="JS"
                width="NaN%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(136,132,216,1)",
                      "width": "NaN%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              JS
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          JS
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(140,203,227,1)"
                getItemTooltip={[Function]}
                key="1"
                label="CSS"
                width="NaN%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(140,203,227,1)",
                      "width": "NaN%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              CSS
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          CSS
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(135,205,150,1)"
                getItemTooltip={[Function]}
                key="2"
                label="IMG"
                width="NaN%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(135,205,150,1)",
                      "width": "NaN%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              IMG
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          IMG
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(183,228,99,1)"
                getItemTooltip={[Function]}
                key="3"
                label="Others"
                width="NaN%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(183,228,99,1)",
                      "width": "NaN%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              Others
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          Others
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(255,198,88,1)"
                getItemTooltip={[Function]}
                key="4"
                label="HTML"
                width="NaN%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(255,198,88,1)",
                      "width": "NaN%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              HTML
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          HTML
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
            </div>
          </HorizontalBarChart>
        </div>
      </Router>
    </MemoryRouter>
  </Component>
  <IconSprite
    height="16"
    style={
      Object {
        "height": 0,
        "position": "absolute",
        "width": 0,
      }
    }
    width="16"
  >
    <svg
      height="16"
      style={
        Object {
          "height": 0,
          "position": "absolute",
          "width": 0,
        }
      }
      width="16"
    >
      <symbol
        className="feather feather-arrow-down"
        fill="none"
        id="arrow"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 5v14M19 12l-7 7-7-7"
        />
      </symbol>
      <symbol
        className="feather feather-arrow-right-circle"
        fill="none"
        id="arrow-right-circle"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 16l4-4-4-4M8 12h8"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="cancel"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-clock"
        fill="none"
        id="clock"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 6v6l4 2"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="close"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-git-commit"
        fill="none"
        id="commit"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="4"
        />
        <path
          d="M1.05 12H7M17.01 12h5.95"
        />
      </symbol>
      <symbol
        className="feather feather-bar-chart"
        fill="none"
        id="filter"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 20V10M18 20V4M6 20v-4"
        />
      </symbol>
      <symbol
        className="feather feather-help-circle"
        fill="none"
        id="help"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M9.09 9a3 3 0 015.83 1c0 2-3 3-3 3M12 17h.01"
        />
      </symbol>
      <symbol
        className="feather feather-menu"
        fill="none"
        id="menu"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 12h18M3 6h18M3 18h18"
        />
      </symbol>
      <symbol
        fill="currentColor"
        id="sort"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
        />
        <path
          d="M0 0h24v24H0z"
          fill="none"
        />
      </symbol>
      <symbol
        className="feather feather-alert-triangle"
        fill="none"
        id="warning"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0zM12 9v4M12 17h.01"
        />
      </symbol>
    </svg>
  </IconSprite>
</div>
`;

exports[`Storyshots UI/HorizontalBarChart with custom colors 1`] = `
<div>
  <Component>
    <MemoryRouter
      initialEntries={
        Array [
          Object {
            "key": "home",
            "pathname": "/",
          },
        ]
      }
    >
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "key": "home",
                "pathname": "/",
                "search": "",
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "home",
              "pathname": "/",
              "search": "",
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <div
          style={
            Object {
              "height": "100%",
              "padding": "24px",
              "paddingTop": "128px",
              "width": "100%",
            }
          }
        >
          <HorizontalBarChart
            className=""
            data={
              Object {
                "labels": Array [
                  "JS",
                  "CSS",
                  "IMG",
                  "Others",
                  "HTML",
                ],
                "values": Array [
                  Object {
                    "color": "red",
                    "value": 300,
                  },
                  Object {
                    "color": "green",
                    "value": 200,
                  },
                  Object {
                    "color": "orange",
                    "value": 300,
                  },
                  Object {
                    "color": "blue",
                    "value": 0,
                  },
                  Object {
                    "color": "pink",
                    "value": 20,
                  },
                ],
              }
            }
            maxValue={null}
          >
            <div
              className="root"
            >
              <HorizontalBarChartItem
                className="item"
                color="red"
                getItemTooltip={[Function]}
                key="0"
                label="JS"
                width="36.59%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "red",
                      "width": "36.59%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              JS
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          JS
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="green"
                getItemTooltip={[Function]}
                key="1"
                label="CSS"
                width="24.39%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "green",
                      "width": "24.39%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              CSS
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          CSS
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="orange"
                getItemTooltip={[Function]}
                key="2"
                label="IMG"
                width="36.59%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "orange",
                      "width": "36.59%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              IMG
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          IMG
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="blue"
                getItemTooltip={[Function]}
                key="3"
                label="Others"
                width="0%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "blue",
                      "width": "0%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              Others
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          Others
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="pink"
                getItemTooltip={[Function]}
                key="4"
                label="HTML"
                width="2.44%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "pink",
                      "width": "2.44%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              HTML
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          HTML
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
            </div>
          </HorizontalBarChart>
        </div>
      </Router>
    </MemoryRouter>
  </Component>
  <IconSprite
    height="16"
    style={
      Object {
        "height": 0,
        "position": "absolute",
        "width": 0,
      }
    }
    width="16"
  >
    <svg
      height="16"
      style={
        Object {
          "height": 0,
          "position": "absolute",
          "width": 0,
        }
      }
      width="16"
    >
      <symbol
        className="feather feather-arrow-down"
        fill="none"
        id="arrow"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 5v14M19 12l-7 7-7-7"
        />
      </symbol>
      <symbol
        className="feather feather-arrow-right-circle"
        fill="none"
        id="arrow-right-circle"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 16l4-4-4-4M8 12h8"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="cancel"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-clock"
        fill="none"
        id="clock"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 6v6l4 2"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="close"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-git-commit"
        fill="none"
        id="commit"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="4"
        />
        <path
          d="M1.05 12H7M17.01 12h5.95"
        />
      </symbol>
      <symbol
        className="feather feather-bar-chart"
        fill="none"
        id="filter"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 20V10M18 20V4M6 20v-4"
        />
      </symbol>
      <symbol
        className="feather feather-help-circle"
        fill="none"
        id="help"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M9.09 9a3 3 0 015.83 1c0 2-3 3-3 3M12 17h.01"
        />
      </symbol>
      <symbol
        className="feather feather-menu"
        fill="none"
        id="menu"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 12h18M3 6h18M3 18h18"
        />
      </symbol>
      <symbol
        fill="currentColor"
        id="sort"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
        />
        <path
          d="M0 0h24v24H0z"
          fill="none"
        />
      </symbol>
      <symbol
        className="feather feather-alert-triangle"
        fill="none"
        id="warning"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0zM12 9v4M12 17h.01"
        />
      </symbol>
    </svg>
  </IconSprite>
</div>
`;

exports[`Storyshots UI/HorizontalBarChart with custom label 1`] = `
<div>
  <Component>
    <MemoryRouter
      initialEntries={
        Array [
          Object {
            "key": "home",
            "pathname": "/",
          },
        ]
      }
    >
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "key": "home",
                "pathname": "/",
                "search": "",
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "home",
              "pathname": "/",
              "search": "",
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <div
          style={
            Object {
              "height": "100%",
              "padding": "24px",
              "paddingTop": "128px",
              "width": "100%",
            }
          }
        >
          <HorizontalBarChart
            className=""
            data={
              Object {
                "labels": Array [
                  "JS",
                  "CSS",
                  "IMG",
                  "Others",
                  "HTML",
                ],
                "values": Array [
                  Object {
                    "color": "red",
                    "label": <h3>
                      JS
                    </h3>,
                    "value": 300,
                  },
                  Object {
                    "color": "green",
                    "label": <h3>
                      JS
                    </h3>,
                    "value": 200,
                  },
                  Object {
                    "color": "orange",
                    "label": <h3>
                      JS
                    </h3>,
                    "value": 300,
                  },
                  Object {
                    "color": "blue",
                    "label": <h3>
                      JS
                    </h3>,
                    "value": 0,
                  },
                  Object {
                    "color": "pink",
                    "label": <h3>
                      JS
                    </h3>,
                    "value": 20,
                  },
                ],
              }
            }
            maxValue={null}
          >
            <div
              className="root"
            >
              <HorizontalBarChartItem
                className="item"
                color="red"
                getItemTooltip={[Function]}
                key="0"
                label={
                  <h3>
                    JS
                  </h3>
                }
                width="36.59%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "red",
                      "width": "36.59%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              <h3>
                                JS
                              </h3>
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          <h3>
                            JS
                          </h3>
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="green"
                getItemTooltip={[Function]}
                key="1"
                label={
                  <h3>
                    JS
                  </h3>
                }
                width="24.39%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "green",
                      "width": "24.39%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              <h3>
                                JS
                              </h3>
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          <h3>
                            JS
                          </h3>
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="orange"
                getItemTooltip={[Function]}
                key="2"
                label={
                  <h3>
                    JS
                  </h3>
                }
                width="36.59%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "orange",
                      "width": "36.59%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              <h3>
                                JS
                              </h3>
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          <h3>
                            JS
                          </h3>
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="blue"
                getItemTooltip={[Function]}
                key="3"
                label={
                  <h3>
                    JS
                  </h3>
                }
                width="0%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "blue",
                      "width": "0%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              <h3>
                                JS
                              </h3>
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          <h3>
                            JS
                          </h3>
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="pink"
                getItemTooltip={[Function]}
                key="4"
                label={
                  <h3>
                    JS
                  </h3>
                }
                width="2.44%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "pink",
                      "width": "2.44%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              <h3>
                                JS
                              </h3>
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          <h3>
                            JS
                          </h3>
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
            </div>
          </HorizontalBarChart>
        </div>
      </Router>
    </MemoryRouter>
  </Component>
  <IconSprite
    height="16"
    style={
      Object {
        "height": 0,
        "position": "absolute",
        "width": 0,
      }
    }
    width="16"
  >
    <svg
      height="16"
      style={
        Object {
          "height": 0,
          "position": "absolute",
          "width": 0,
        }
      }
      width="16"
    >
      <symbol
        className="feather feather-arrow-down"
        fill="none"
        id="arrow"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 5v14M19 12l-7 7-7-7"
        />
      </symbol>
      <symbol
        className="feather feather-arrow-right-circle"
        fill="none"
        id="arrow-right-circle"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 16l4-4-4-4M8 12h8"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="cancel"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-clock"
        fill="none"
        id="clock"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 6v6l4 2"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="close"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-git-commit"
        fill="none"
        id="commit"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="4"
        />
        <path
          d="M1.05 12H7M17.01 12h5.95"
        />
      </symbol>
      <symbol
        className="feather feather-bar-chart"
        fill="none"
        id="filter"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 20V10M18 20V4M6 20v-4"
        />
      </symbol>
      <symbol
        className="feather feather-help-circle"
        fill="none"
        id="help"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M9.09 9a3 3 0 015.83 1c0 2-3 3-3 3M12 17h.01"
        />
      </symbol>
      <symbol
        className="feather feather-menu"
        fill="none"
        id="menu"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 12h18M3 6h18M3 18h18"
        />
      </symbol>
      <symbol
        fill="currentColor"
        id="sort"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
        />
        <path
          d="M0 0h24v24H0z"
          fill="none"
        />
      </symbol>
      <symbol
        className="feather feather-alert-triangle"
        fill="none"
        id="warning"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0zM12 9v4M12 17h.01"
        />
      </symbol>
    </svg>
  </IconSprite>
</div>
`;

exports[`Storyshots UI/HorizontalBarChart with maxValue 1`] = `
<div>
  <Component>
    <MemoryRouter
      initialEntries={
        Array [
          Object {
            "key": "home",
            "pathname": "/",
          },
        ]
      }
    >
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "key": "home",
                "pathname": "/",
                "search": "",
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 0,
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "home",
              "pathname": "/",
              "search": "",
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <div
          style={
            Object {
              "height": "100%",
              "padding": "24px",
              "paddingTop": "128px",
              "width": "100%",
            }
          }
        >
          <HorizontalBarChart
            className=""
            data={
              Object {
                "labels": Array [
                  "JS",
                  "CSS",
                  "IMG",
                  "Others",
                  "HTML",
                ],
                "values": Array [
                  300,
                  200,
                  300,
                  0,
                  20,
                ],
              }
            }
            maxValue={1200}
          >
            <div
              className="root"
            >
              <HorizontalBarChartItem
                className="item"
                color="rgba(136,132,216,1)"
                getItemTooltip={[Function]}
                key="0"
                label="JS"
                width="25%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(136,132,216,1)",
                      "width": "25%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              JS
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          JS
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(140,203,227,1)"
                getItemTooltip={[Function]}
                key="1"
                label="CSS"
                width="16.67%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(140,203,227,1)",
                      "width": "16.67%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              CSS
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          CSS
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(135,205,150,1)"
                getItemTooltip={[Function]}
                key="2"
                label="IMG"
                width="25%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(135,205,150,1)",
                      "width": "25%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              IMG
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          IMG
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(183,228,99,1)"
                getItemTooltip={[Function]}
                key="3"
                label="Others"
                width="0%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(183,228,99,1)",
                      "width": "0%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              Others
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          Others
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
              <HorizontalBarChartItem
                className="item"
                color="rgba(255,198,88,1)"
                getItemTooltip={[Function]}
                key="4"
                label="HTML"
                width="1.67%"
              >
                <span
                  className="item textOverflowed"
                  style={
                    Object {
                      "background": "rgba(255,198,88,1)",
                      "width": "1.67%",
                    }
                  }
                >
                  <Tooltip
                    as="span"
                    className="itemContent"
                    containerRef={null}
                    darkMode={false}
                    title={null}
                  >
                    <ForwardRef(TooltipReference)
                      animated={false}
                      animating={false}
                      as="span"
                      baseId="id-test"
                      className="root itemContent"
                      hide={[Function]}
                      place={[Function]}
                      placement="top"
                      setAnimated={[Function]}
                      setBaseId={[Function]}
                      setVisible={[Function]}
                      show={[Function]}
                      stopAnimation={[Function]}
                      toggle={[Function]}
                      unstable_arrowRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_arrowStyles={Object {}}
                      unstable_disclosureRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_idCountRef={
                        Object {
                          "current": 0,
                        }
                      }
                      unstable_originalPlacement="top"
                      unstable_popoverRef={
                        Object {
                          "current": null,
                        }
                      }
                      unstable_popoverStyles={
                        Object {
                          "left": "100%",
                          "position": "fixed",
                          "top": "100%",
                        }
                      }
                      unstable_referenceRef={
                        Object {
                          "current": <span
                            aria-describedby="id-test"
                            class="root itemContent"
                            tabindex="0"
                          >
                            <span
                              class="itemLabel"
                            >
                              HTML
                            </span>
                          </span>,
                        }
                      }
                      unstable_setTimeout={[Function]}
                      unstable_timeout={0}
                      unstable_update={[Function]}
                      visible={false}
                    >
                      <span
                        aria-describedby="id-test"
                        className="root itemContent"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        tabIndex={0}
                      >
                        <span
                          className="itemLabel"
                        >
                          HTML
                        </span>
                      </span>
                    </ForwardRef(TooltipReference)>
                  </Tooltip>
                </span>
              </HorizontalBarChartItem>
            </div>
          </HorizontalBarChart>
        </div>
      </Router>
    </MemoryRouter>
  </Component>
  <IconSprite
    height="16"
    style={
      Object {
        "height": 0,
        "position": "absolute",
        "width": 0,
      }
    }
    width="16"
  >
    <svg
      height="16"
      style={
        Object {
          "height": 0,
          "position": "absolute",
          "width": 0,
        }
      }
      width="16"
    >
      <symbol
        className="feather feather-arrow-down"
        fill="none"
        id="arrow"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 5v14M19 12l-7 7-7-7"
        />
      </symbol>
      <symbol
        className="feather feather-arrow-right-circle"
        fill="none"
        id="arrow-right-circle"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 16l4-4-4-4M8 12h8"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="cancel"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-clock"
        fill="none"
        id="clock"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M12 6v6l4 2"
        />
      </symbol>
      <symbol
        className="feather feather-x-circle"
        fill="none"
        id="close"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M15 9l-6 6M9 9l6 6"
        />
      </symbol>
      <symbol
        className="feather feather-git-commit"
        fill="none"
        id="commit"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="4"
        />
        <path
          d="M1.05 12H7M17.01 12h5.95"
        />
      </symbol>
      <symbol
        className="feather feather-bar-chart"
        fill="none"
        id="filter"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M12 20V10M18 20V4M6 20v-4"
        />
      </symbol>
      <symbol
        className="feather feather-help-circle"
        fill="none"
        id="help"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="10"
        />
        <path
          d="M9.09 9a3 3 0 015.83 1c0 2-3 3-3 3M12 17h.01"
        />
      </symbol>
      <symbol
        className="feather feather-menu"
        fill="none"
        id="menu"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 12h18M3 6h18M3 18h18"
        />
      </symbol>
      <symbol
        fill="currentColor"
        id="sort"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
        />
        <path
          d="M0 0h24v24H0z"
          fill="none"
        />
      </symbol>
      <symbol
        className="feather feather-alert-triangle"
        fill="none"
        id="warning"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0zM12 9v4M12 17h.01"
        />
      </symbol>
    </svg>
  </IconSprite>
</div>
`;
