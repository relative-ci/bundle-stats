.root {
  position: relative;
  aspect-ratio: 16/9;
  background: var(--color-background);
  border-bottom-left-radius: inherit;
  border-bottom-right-radius: inherit;
  overflow: hidden;
}

.canvas {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: var(--color-background);
}

/**
 * Tile group
 */
.tileGroup {
  position: absolute;
}

.tileGroupTitle {
  width: 100%;
  padding: 4px 2px 4px var(--space-xxsmall);
  color: var(--color-text);
  font-family: var(--font-family-fixed);
  font-size: 10px;
  line-height: 16px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.tileGroupTitleTotal {
  margin-left: var(--space-xxxsmall);
}

/** Tile group size variation */
.tileGroupSizeDefault {
  transition: var(--ui-transition-in);
  transition-property: left, top, width, height;
}

/** Tile group nested variation */
.nested .tileGroup {
  background-color: rgba(27, 26, 33, 0.05);
  outline: 1px solid rgba(255, 255, 255, 0.75);
}

.nested .tileGroup:has(> .tileGroupTitle:hover),
.nested .tileGroup:has(> .tile:hover) {
  background-color: rgba(27, 26, 33, 0.1);
  outline: 1px solid rgba(255, 255, 255, 1);
}

.nested .tileGroup--NEGATIVE {
  background-color: rgba(194, 31, 37, 0.05);
}

.nested .tileGroup--NEGATIVE:has(> .tileGroupTitle:hover),
.nested .tileGroup--NEGATIVE:has(> .tile:hover) {
  background-color: rgba(194, 31, 37, 0.1);
}

.nested .tileGroup--POSITIVE {
  background-color: rgba(42, 147, 39, 0.05);
}

.nested .tileGroup--POSITIVE:has(> .tileGroupTitle:hover),
.nested .tileGroup--POSITIVE:has(> .tile:hover) {
  background-color: rgba(42, 147, 39, 0.1);
}

/* reset bacground color when having a not changed group */
.nested .tileGroup--POSITIVE > .tileGroup--NO_CHANGE,
.nested .tileGroup--NEGATIVE > .tileGroup--NO_CHANGE {
  background-color: var(--color-background);
  background-image: linear-gradient(rgba(27, 26, 33, 0.1), rgba(27, 26, 33, 0.1));
}

.nested .tileGroup--POSITIVE > .tileGroup--NO_CHANGE:has(> .tileGroupTitle:hover),
.nested .tileGroup--POSITIVE > .tileGroup--NO_CHANGE:has(> .tile:hover),
.nested .tileGroup--NEGATIVE > .tileGroup--NO_CHANGE:has(> .tileGroupTitle:hover),
.nested .tileGroup--NEGATIVE > .tileGroup--NEGATIVE > .tileGroup--NO_CHANGE:has(> .tile:hover) {
  background-color: var(--color-background);
  background-image: linear-gradient(rgba(27, 26, 33, 0.1), rgba(27, 26, 33, 0.1));
}

/** Leaf wrapper button */
.tile {
  position: absolute;
  appearance: none;
  border: 0;
  border-radius: 0;
  padding: 0;
  background: var(--color-background);
  display: flex;
  align-items: center;
  font-family: var(--font-family-fixed);
  font-size: var(--size-small);
  line-height: var(--line-height-heading);
  text-align: left;
  transition: var(--ui-transition-out);
}

.tile::before {
  content: "";
  display: block;
  position: absolute;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: currentColor;
}

.tileContent {
  position: relative;
  z-index: 1;
  width: 100%;
  height: 100%;
  display: flex;
  flex-flow: column;
  justify-content: center;
  padding: var(--space-xxsmall) var(--space-xxsmall);
  gap: var(--space-xxxsmall);
  line-height: var(--line-height-heading);
}

/** Align label to other elements on the first column cells */
.tileFirstCol .tileContent {
  padding-left: var(--space-small);
}

.tileContentLabel {
  flex: 0 1 auto;
  width: 100%;
  min-width: 0;
  max-height: calc(2em * var(--line-height-heading)); /* render max 2 rows */
  overflow-wrap: break-word;
  word-wrap: break-word;
  word-break: break-all;
  word-break: break-word;
  hyphens: auto;
  white-space: normal;
  overflow: hidden;
}

.tileContentValue {
  flex: 0 0 auto;
  max-width: calc(100% + var(--space-xxsmall));
  white-space: nowrap;
  overflow: hidden;
}

.tileContentMetric {
  font-weight: bold;
}

.tileContentDelta {
  margin-left: var(--space-xxxsmall);
}

/** Tile size variation */
.tileSizeSmall .tileContent {
  padding: var(--space-xxxsmall) var(--space-xxsmall);
  gap: 0;
  font-size: var(--size-xsmall);
}

.tileSizeSmall .tileContentLabel {
  margin-top: 0;
}

.tileSizeDefault {
  transition: var(--ui-transition-in);
  transition-property: left, top, width, height;
}

/** Tile diff variation */
.tile {
  outline: 1px solid rgba(255, 255, 255, 1);
  color: var(--color-text);
  transition: var(--ui-transition-out);
}

.tile::before {
  color: var(--color-highlight);
  transition: var(--ui-transition-out);
  transition-property: opacity;
  opacity: 0.5;
}

.tile:hover::before {
  transition: var(--ui-transition-in);
  opacity: 0.4;
}

.tile-NO_CHANGE {
  color: var(--color-text-light);
}

.tile-NO_CHANGE::before {
  color: var(--color-gray-50);
}

.tile-HIGH_NEGATIVE::before {
  color: var(--color-red-100);
}

.tile-NEGATIVE::before {
  color: var(--color-red-50);
}

.tile-LOW_NEGATIVE::before {
  color: var(--color-red-50);
  opacity: 0.6;
}

.tile-LOW_NEGATIVE:hover::before {
  opacity: 0.5;
}

.tile-LOW_POSITIVE::before {
  color: var(--color-green-50);
  opacity: 0.6;
}

.tile-LOW_POSITIVE:hover::before {
  opacity: 0.5;
}

.tile-POSITIVE::before {
  color: var(--color-green-50);
}

.tile-HIGH_POSITIVE::before {
  color: var(--color-green-100);
}

/** empty message */
.emptyMessage {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.emptyMessageWrapper {
  max-width: 100%;
  text-align: center;
}

/** tooltip */
.tileContentTooltipAnchor {
  width: 100%;
  height: 100%;
}

.tooltip {
  z-index: var(--layer-xxhigh);
  padding: var(--space-xsmall) var(--space-small);
  border-radius: var(--radius-medium);
  width: calc(100vw - 2 * var(--space-small));
  max-width: 340px;
  outline: none;
  filter: drop-shadow(var(--shadow-layer-high));
  will-change: filter;
  background: var(--color-light);
  font-size: var(--size-small);
  pointer-events: none;
}

.tileTooltipArrow svg {
  display: block;
  fill: var(--color-background) !important;
}

.tileTooltipContentTitle {
  font-size: var(--size-small);
}

/* prevent tooltip portal wrapper from capturing events */
div[role="presentation"]:has(.tooltip) {
  pointer-events: none;
}
